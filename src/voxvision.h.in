/**
   @file voxvision.h
   @brief Types and declarations for voxvision libraries
**/

#ifndef VOXVISION_H
#define VOXVISION_H

#define VOX_MODULE_PATH "@voxengine_module_path@/"
#define VOX_DATA_PATH "@voxengine_data_path@/"

/**
   \brief Use SSE intrinsics
**/
#cmakedefine SSE_INTRIN

#define VOX_VERSION_MAJOR @voxvision_VERSION_MAJOR@
#define VOX_VERSION_MINOR @voxvision_VERSION_MINOR@
#define VOX_VERSION "@voxvision_VERSION@"

// Types
/*
  Data type layout:
  1) vox_dot

  ----+---+---+------
  |   |   |   |     |
  | x | y | z | XXX |
  |   |   |   |     |
  ----+---+---+------

  0..........96....128

  2) vox_quat

  ----+---+---+----
  |   |   |   |   |
  | 1 | i | j | k |
  |   |   |   |   |
  ----+---+---+----
  0..............128
*/

#if defined(SSE_INTRIN)
#include <xmmintrin.h>
#include <smmintrin.h>
typedef float vox_dot[4] __attribute__ ((aligned (16)));
typedef float vox_quat[4] __attribute__ ((aligned (16)));
#define vox_dot_copy(d1, d2) _mm_store_ps (d1, _mm_load_ps (d2))
#define vox_dot_equalp(d1, d2) !(_mm_movemask_ps (_mm_load_ps (d1) != _mm_load_ps(d2)) & 7)
#define vox_dot_set(dot, x, y, z) _mm_store_ps (dot, _mm_set_ps (0, z, y, x))
#define vox_quat_copy(q1, q2) _mm_store_ps (q1, _mm_load_ps (q2))
#define vox_quat_set(q, w, i, j, k) _mm_store_ps (q, _mm_set_ps (k, j, i, w))
#else
typedef float vox_dot[3];
typedef float vox_quat[4];
#define vox_dot_copy(d1, d2) memcpy (d1, d2, sizeof (vox_dot))
#define vox_dot_set(dot, x, y, z) do {          \
        dot[0] = x;                             \
        dot[1] = y;                             \
        dot[2] = z;                             \
    } while (0)
#define vox_dot_equalp(d1, d2) (memcmp (d1, d2, sizeof (vox_dot)) == 0)
#define vox_quat_copy(q1, q2) memcpy (q1, q2, sizeof (vox_quat))
#define vox_quat_set(q, w, i, j, k) do {  \
        q[0] = w;                        \
        q[1] = i;                        \
        q[2] = j;                        \
        q[3] = k;                        \
    } while (0)
#endif

/**
   \brief Structure representing a box.
**/
struct vox_box
{
    vox_dot min; /**< \brief minimal coordinate */
    vox_dot max; /**< \brief maximal coordinate */
};
#include <string.h>
#define vox_box_copy(b1, b2) memcpy ((b1), (b2), sizeof (struct vox_box))
#define vox_box_equalp(b1, b2) (memcmp ((b1), (b2), sizeof (struct vox_box)) == 0)

#endif
